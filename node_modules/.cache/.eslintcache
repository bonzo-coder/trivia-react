[{"/Users/xozi/Desktop/triviaProj/trivia/trivia-react/src/index.js":"1","/Users/xozi/Desktop/triviaProj/trivia/trivia-react/src/reportWebVitals.js":"2","/Users/xozi/Desktop/triviaProj/trivia/trivia-react/src/App.js":"3","/Users/xozi/Desktop/triviaProj/trivia/trivia-react/src/Question.js":"4"},{"size":540,"mtime":1689442295540,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1689280954500,"results":"7","hashOfConfig":"6"},{"size":7958,"mtime":1689718763904,"results":"8","hashOfConfig":"6"},{"size":1550,"mtime":1689717898082,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nzffc2",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/xozi/Desktop/triviaProj/trivia/trivia-react/src/index.js",[],[],"/Users/xozi/Desktop/triviaProj/trivia/trivia-react/src/reportWebVitals.js",[],[],"/Users/xozi/Desktop/triviaProj/trivia/trivia-react/src/App.js",["23","24","25"],[],"import React from 'react';\nimport './App.css';\nimport Question from \"./Question\"\nimport { nanoid } from 'nanoid';\n\n\nfunction App() {\n\nconst [start, setStart]= React.useState(true)\nconst [questions, setQuestions] = React.useState([])\nconst [answers, setAnswers] = React.useState([])\nconst [userAns, setUserAns] = React.useState([\"1\",\"2\",\"3\",\"4\",\"5\"])\nconst [ansShownScreen, setAnsShownScreen] = React.useState([])\nconst [gameWon, setGameWon] = React.useState(false)\nconst [ansCorrect, setAnsCorrect] = React.useState(0)\n// changes start screen into game\nfunction changeStart () {\n  setStart(!start)\n}\n\n// data download from api\nReact.useEffect(() => {\n  fetch(\"https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple\")\n  .then(res => res.json())\n  .then(data => {\n\n    function decodeHtml(html) {\n      console.log(html)\n      var txt = document.createElement(\"textarea\");\n      txt.innerHTML = html;\n      return txt.value;\n  }\n    const questionsArray = []\n    const answersArray =[]\n    for (let i=0; i<5; i++) {\n      questionsArray.push({\n        question: decodeHtml(data.results[i].question),\n        id: i,\n      })\n      answersArray.push({\n         correct: decodeHtml(data.results[i].correct_answer),\n         incorrect: [decodeHtml(data.results[i].incorrect_answers[0]),\n                     decodeHtml(data.results[i].incorrect_answers[1]),\n                     decodeHtml(data.results[i].incorrect_answers[2]),]\n      })\n    }\n    setUserAns(prev=> [\"1\",\"2\",\"3\",\"4\",\"5\"])\n    setGameWon(prev=> false)\n    setAnsCorrect(prev => 0)\n    saveAnsShown(answersArray, questionsArray)\n  })\n},[start])\n\nfunction saveAnsShown (ans, que) {\n  setQuestions(que)\n  setAnswers(ans)\n  setAnsShownScreen(() => [\n     mixAnswers(ans[0]),\n     mixAnswers(ans[1]),\n     mixAnswers(ans[2]),\n     mixAnswers(ans[3]),\n     mixAnswers(ans[4])\n     \n  ])\n  \n}\n\nfunction mixAnswers (obj) {\n    let finalAnsArr = []\n    let newAnswers = [\n      obj.correct, \n      obj.incorrect[0],\n      obj.incorrect[1],\n      obj.incorrect[2],\n    ]\n    //choose 1 ans randomly\n    const choose1 = Math.floor(Math.random()*3)\n    finalAnsArr.push({id:nanoid(), ans:newAnswers[choose1], held:false, guessed: \"\"})\n    newAnswers.splice(choose1,1)\n    //choose 2 ans randomly\n    const choose2 = Math.floor(Math.random()*2)\n    finalAnsArr.push({id:nanoid(), ans:newAnswers[choose2], held:false, guessed: \"\"})\n    newAnswers.splice(choose2,1)\n    //choose 3 ans randomly\n    const choose3 = Math.floor(Math.random())\n    finalAnsArr.push({id:nanoid(), ans:newAnswers[choose3], held:false, guessed: \"\"})\n    newAnswers.splice(choose3,1)\n    finalAnsArr.push({id:nanoid() ,ans: newAnswers[0], held:false, guessed: \"\"})\n   \n    return finalAnsArr\n}\n// checks answers and sets guessed and game state\nfunction checkAnswers () {\n    const arrayCorrectAns = answers.map ((el) => {\n          return el.correct\n    }) \n    let answersGuessed = 0;\n    let arrayAns = []\n    const flatArr = ansShownScreen.flatMap(x=>x)\n\n    for (let i=0; i<5; i++) {\n      let tempArray = []\n        if (arrayCorrectAns[i]=== userAns[i]) {\n            answersGuessed = answersGuessed +1;\n\n            if (flatArr[4*i].ans === userAns[i] ) {\n              tempArray.push({...flatArr[4*i], guessed: \"yes\"})\n            } else {\n              tempArray.push(flatArr[4*i])\n            }\n    \n            if (flatArr[4*i+1].ans === userAns[i] ) {\n              tempArray.push({...flatArr[4*i+1], guessed: \"yes\"})\n            } else {\n              tempArray.push(flatArr[4*i+1])\n            }\n    \n            if (flatArr[4*i+2].ans === userAns[i] ) {\n              tempArray.push({...flatArr[4*i+2], guessed: \"yes\"})\n            } else {\n              tempArray.push(flatArr[4*i+2])\n            }\n    \n            if (flatArr[4*i+3].ans === userAns[i] ) {\n              tempArray.push({...flatArr[4*i], guessed: \"yes\"})\n            } else {\n              tempArray.push(flatArr[4*i+3])\n            }\n        } else {\n          if (flatArr[4*i].ans === userAns[i] ) {\n            tempArray.push({...flatArr[4*i], guessed: \"no\"})\n          } else if (flatArr[4*i].ans === arrayCorrectAns[i]) {\n            tempArray.push({...flatArr[4*i], guessed: \"correctAns\"})\n          } else {\n            tempArray.push(flatArr[4*i])\n          }\n  \n          if (flatArr[4*i+1].ans === userAns[i] ) {\n            tempArray.push({...flatArr[4*i+1], guessed: \"no\"})\n          } else if (flatArr[4*i+1].ans === arrayCorrectAns[i]) {\n            tempArray.push({...flatArr[4*i+1], guessed: \"correctAns\"})\n          } else {\n            tempArray.push(flatArr[4*i+1])\n          }\n  \n          if (flatArr[4*i+2].ans === userAns[i] ) {\n            tempArray.push({...flatArr[4*i+2], guessed: \"no\"})\n          } else if (flatArr[4*i+2].ans === arrayCorrectAns[i]) {\n            tempArray.push({...flatArr[4*i+2], guessed: \"correctAns\"})\n          } else {\n            tempArray.push(flatArr[4*i+2])\n          }\n  \n          if (flatArr[4*i+3].ans === userAns[i] ) {\n            tempArray.push({...flatArr[4*i+3], guessed: \"no\"})\n          } else if (flatArr[4*i+3].ans === arrayCorrectAns[i]) {\n            tempArray.push({...flatArr[4*i+3], guessed: \"correctAns\"})\n          } else {\n            tempArray.push(flatArr[4*i+3])\n          }\n        }\n        arrayAns.push(tempArray)\n    }\n    setAnsShownScreen(prevAns => arrayAns)\n    setGameWon(gameWon=> !gameWon)\n    setAnsCorrect(prevValue => answersGuessed)\n}\n\nfunction toggle (event) {\n  console.log(event.target)\n    const answer = event.target.innerHTML\n    const noOfQuestion = event.target.getAttribute('name')\n    const newAnsArr = []\n    let final\n    // updates held to color field\n      setAnsShownScreen(prevAns => {\n              prevAns.map(ans => {\n                  if (ans === ansShownScreen[noOfQuestion]){\n                      const innerArr=[]\n                      ans.map((el) => {\n                         return el.ans === answer ? innerArr.push({id: el.id, ans: el.ans, held: !el.held, guessed: el.guessed})\n                          : innerArr.push({...el, held: false})\n                      })\n                      newAnsArr.push(innerArr)\n              } else {\n                      newAnsArr.push(ans)\n                  }\n                  final = newAnsArr.slice(0,5)\n              })\n              return final\n          })\n          //usets user answars array\n      setUserAns(prevAns => {\n          const ansArray = []\n          prevAns.map((elem,i) => {\n            if (i == noOfQuestion) {\n              return ansArray.push(answer)\n            } else {\n              return ansArray.push(prevAns[i])\n            }\n          })\n          return ansArray\n      })\n}\n\n// prints questions and answers to the screen\nconst questionScreen = ansShownScreen.map((ans, i ) => (\n  \n       ( <Question \n            question={questions[i].question} \n            key={questions[i].id} \n            name={questions[i].id} \n            answers={ansShownScreen[i]}\n            fullAnswers={ansShownScreen}\n            gameWon={gameWon}\n            toggle = {toggle} />)\n    \n))\n\n// draws element onto DOM\n  return (\n    <div>\n        {(start) && (\n          <div>\n            <div className='container'> \n                <div className='title'>Quizzleee</div>\n                <div className='info'>Check your overall knowledge?</div>\n                <button className='button' onClick={changeStart}>Start Quiz</button>\n              </div>\n          </div> \n                 )}\n        {(!start) && (ansShownScreen) && (\n          <div>\n            <div className='containerAnswers'> \n                {questionScreen}\n                \n                {gameWon && (<div>You scored {ansCorrect}/5 correct answers </div>)}\n                <button className='button' onClick={gameWon? changeStart : checkAnswers}>{gameWon? \"Play again\" : \"Check\"}</button>\n              </div>\n          </div> \n                 )}\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/xozi/Desktop/triviaProj/trivia/trivia-react/src/Question.js",[],[],{"ruleId":"26","severity":1,"message":"27","line":52,"column":3,"nodeType":"28","endLine":52,"endColumn":10,"suggestions":"29"},{"ruleId":"30","severity":1,"message":"31","line":177,"column":31,"nodeType":"32","messageId":"33","endLine":177,"endColumn":33},{"ruleId":"34","severity":1,"message":"35","line":196,"column":19,"nodeType":"36","messageId":"37","endLine":196,"endColumn":21},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'saveAnsShown'. Either include it or remove the dependency array.","ArrayExpression",["38"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"39","fix":"40"},"Update the dependencies array to be: [saveAnsShown, start]",{"range":"41","text":"42"},[1608,1615],"[saveAnsShown, start]"]