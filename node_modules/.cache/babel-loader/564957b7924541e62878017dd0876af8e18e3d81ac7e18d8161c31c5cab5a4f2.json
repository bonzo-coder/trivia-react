{"ast":null,"code":"var _jsxFileName = \"/Users/xozi/Desktop/triviaProj/trivia/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport Question from \"./Question\";\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [start, setStart] = React.useState(true);\n  const [questions, setQuestions] = React.useState([]);\n  const [answers, setAnswers] = React.useState([]);\n  const [userAns, setUserAns] = React.useState([\"1\", \"2\", \"3\", \"4\", \"5\"]);\n  const [ansShownScreen, setAnsShownScreen] = React.useState([]);\n  const [gameWon, setGameWon] = React.useState(false);\n  const [ansCorrect, setAnsCorrect] = React.useState(0);\n  // changes start screen into game\n  function changeStart() {\n    setStart(!start);\n  }\n\n  // data download from api\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple\").then(res => res.json()).then(data => {\n      const questionsArray = [];\n      const answersArray = [];\n      for (let i = 0; i < 5; i++) {\n        questionsArray.push({\n          question: data.results[i].question,\n          id: i\n        });\n        answersArray.push({\n          correct: data.results[i].correct_answer,\n          incorrect: data.results[i].incorrect_answers\n        });\n      }\n      saveAnsShown(answersArray, questionsArray);\n    });\n  }, []);\n  function saveAnsShown(ans, que) {\n    setQuestions(que);\n    setAnswers(ans);\n    setAnsShownScreen(() => [mixAnswers(ans[0]), mixAnswers(ans[1]), mixAnswers(ans[2]), mixAnswers(ans[3]), mixAnswers(ans[4])]);\n  }\n\n  // React.useEffect (() => {\n\n  // },[userAns])\n\n  function mixAnswers(obj) {\n    let finalAnsArr = [];\n    let newAnswers = [obj.correct, obj.incorrect[0], obj.incorrect[1], obj.incorrect[2]];\n    //choose 1 ans randomly\n    const choose1 = Math.floor(Math.random() * 3);\n    finalAnsArr.push({\n      id: nanoid(),\n      ans: newAnswers[choose1],\n      held: false,\n      guessed: \"\"\n    });\n    newAnswers.splice(choose1, 1);\n    //choose 2 ans randomly\n    const choose2 = Math.floor(Math.random() * 2);\n    finalAnsArr.push({\n      id: nanoid(),\n      ans: newAnswers[choose2],\n      held: false,\n      guessed: \"\"\n    });\n    newAnswers.splice(choose2, 1);\n    //choose 3 ans randomly\n    const choose3 = Math.floor(Math.random());\n    finalAnsArr.push({\n      id: nanoid(),\n      ans: newAnswers[choose3],\n      held: false,\n      guessed: \"\"\n    });\n    newAnswers.splice(choose3, 1);\n    finalAnsArr.push({\n      id: nanoid(),\n      ans: newAnswers[0],\n      held: false,\n      guessed: \"\"\n    });\n    return finalAnsArr;\n  }\n  function checkAnswers() {\n    const arrayCorrectAns = answers.map(el => {\n      return el.correct;\n    });\n    let answersGuessed = 0;\n    arrayCorrectAns.map((el, i) => {\n      if (el == userAns[i]) {\n        answersGuessed = answersGuessed + 1;\n        setAnsShownScreen(prevAns => [...prevAns, prevAns[i].map((elem, a) => {\n          console.log(elem.ans);\n          console.log(el);\n          return elem.ans === el ? {\n            ...elem,\n            guessed: \"yes\"\n          } : elem;\n        })]);\n        console.log(answersGuessed);\n        console.log(ansShownScreen);\n      }\n    });\n    setGameWon(gameWon => !gameWon);\n    setAnsCorrect(prevValue => answersGuessed);\n  }\n  function toggle(event) {\n    const answer = event.target.innerHTML;\n    const noOfQuestion = event.target.getAttribute('name');\n    const newAnsArr = [];\n    let final;\n    // updates held to color field\n    setAnsShownScreen(prevAns => {\n      prevAns.map(ans => {\n        if (ans === ansShownScreen[noOfQuestion]) {\n          const innerArr = [];\n          ans.map(el => {\n            return el.ans === answer ? innerArr.push({\n              id: el.id,\n              ans: el.ans,\n              held: !el.held,\n              guessed: el.guessed\n            }) : innerArr.push({\n              ...el,\n              held: false\n            });\n          });\n          newAnsArr.push(innerArr);\n        } else {\n          newAnsArr.push(ans);\n        }\n        final = newAnsArr.slice(0, 5);\n      });\n      return final;\n    });\n    //usets user answars array\n    setUserAns(prevAns => {\n      const ansArray = [];\n      prevAns.map((elem, i) => {\n        if (i == noOfQuestion) {\n          return ansArray.push(answer);\n        } else {\n          return ansArray.push(prevAns[i]);\n        }\n      });\n      return ansArray;\n    });\n    console.log(userAns);\n    console.log(answers);\n  }\n\n  // //check ans shown screen exists\n  // function resolveAfter2Seconds() {\n  //   return new Promise(resolve => {\n  //     setTimeout(() => {\n  //       console.log(ansShownScreen)\n  //     }, 2000);\n  //   });\n  // }\n\n  // async function asyncCall() {\n  //   console.log('calling');\n  //   const result = await resolveAfter2Seconds();\n  //   console.log(result);\n  //   // Expected output: \"resolved\"\n  // }\n\n  // asyncCall();\n\n  // setAnsShownScreen(prevAns => {\n  //   prevAns.map(ans => {\n  //       if (ans === answers){\n  //           const innerArr=[]\n  //           ans.map((el) => {\n  //              return el.ans === answer ? innerArr.push({id: el.id, ans: el.ans, held: !el.held})\n  //               : innerArr.push(el)\n  //           })\n  //           newAnsArr.push(innerArr)\n  //   } else {\n  //           newAnsArr.push(ans)\n  //       }\n  //       console.log(newAnsArr)\n  //       const final = newAnsArr.slice(0,5)\n  //       console.log(final.length)\n  //       console.log(final)\n  //       return final\n  //   })\n\n  // })\n  // const questionScreen = React.useEffect(() => {\n\n  //     ansShownScreen.map((ans, i ) => (\n\n  //       ( <Question \n  //            question={questions[i].question} \n  //            key={questions[i].id} \n  //            name={questions[i].id} \n  //            answers={ansShownScreen[i]}\n  //            fullAnswers={ansShownScreen}\n  //            toggle = {toggle} />)\n\n  // ))   \n\n  // },[ansShownScreen])\n\n  // to dziala prawie\n  const questionScreen = ansShownScreen.map((ans, i) => /*#__PURE__*/_jsxDEV(Question, {\n    question: questions[i].question,\n    name: questions[i].id,\n    answers: ansShownScreen[i],\n    fullAnswers: ansShownScreen,\n    toggle: toggle\n  }, questions[i].id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 10\n  }, this));\n\n  // draws element onto DOM\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [start && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"Quizzleee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: \"Check your overall knowledge?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: changeStart,\n          children: \"Start Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }, this), !start && ansShownScreen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containerAnswers\",\n        children: [questionScreen, gameWon && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"You scored \", ansCorrect, \"/5 correct answers \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: checkAnswers,\n          children: gameWon ? \"Play again\" : \"Check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HL8TlwpeuLBL1yOc3YstXS/wAZQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","Question","nanoid","jsxDEV","_jsxDEV","App","_s","start","setStart","useState","questions","setQuestions","answers","setAnswers","userAns","setUserAns","ansShownScreen","setAnsShownScreen","gameWon","setGameWon","ansCorrect","setAnsCorrect","changeStart","useEffect","fetch","then","res","json","data","questionsArray","answersArray","i","push","question","results","id","correct","correct_answer","incorrect","incorrect_answers","saveAnsShown","ans","que","mixAnswers","obj","finalAnsArr","newAnswers","choose1","Math","floor","random","held","guessed","splice","choose2","choose3","checkAnswers","arrayCorrectAns","map","el","answersGuessed","prevAns","elem","a","console","log","prevValue","toggle","event","answer","target","innerHTML","noOfQuestion","getAttribute","newAnsArr","final","innerArr","slice","ansArray","questionScreen","name","fullAnswers","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onClick","_c","$RefreshReg$"],"sources":["/Users/xozi/Desktop/triviaProj/trivia/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport Question from \"./Question\"\nimport { nanoid } from 'nanoid';\n\nfunction App() {\n\nconst [ start, setStart]= React.useState(true)\nconst [questions, setQuestions] = React.useState([])\nconst [answers, setAnswers] = React.useState([])\nconst [userAns, setUserAns] = React.useState([\"1\",\"2\",\"3\",\"4\",\"5\"])\nconst [ansShownScreen, setAnsShownScreen] = React.useState([])\nconst [gameWon, setGameWon] = React.useState(false)\nconst [ansCorrect, setAnsCorrect] = React.useState(0)\n// changes start screen into game\nfunction changeStart () {\n  setStart(!start)\n}\n\n// data download from api\nReact.useEffect(() => {\n  fetch(\"https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple\")\n  .then(res => res.json())\n  .then(data => {\n\n    const questionsArray = []\n    const answersArray =[]\n    for (let i=0; i<5; i++) {\n      questionsArray.push({\n        question: data.results[i].question,\n        id: i,\n      })\n      answersArray.push({\n         correct: data.results[i].correct_answer,\n         incorrect: data.results[i].incorrect_answers\n      })\n    }\n    saveAnsShown(answersArray, questionsArray)\n  })\n},[])\n\nfunction saveAnsShown (ans, que) {\n  setQuestions(que)\n  setAnswers(ans)\n  setAnsShownScreen(() => [\n     mixAnswers(ans[0]),\n     mixAnswers(ans[1]),\n     mixAnswers(ans[2]),\n     mixAnswers(ans[3]),\n     mixAnswers(ans[4])\n     \n  ])\n  \n}\n\n// React.useEffect (() => {\n  \n// },[userAns])\n\nfunction mixAnswers (obj) {\n    let finalAnsArr = []\n    let newAnswers = [\n      obj.correct, \n      obj.incorrect[0],\n      obj.incorrect[1],\n      obj.incorrect[2],\n    ]\n    //choose 1 ans randomly\n    const choose1 = Math.floor(Math.random()*3)\n    finalAnsArr.push({id:nanoid(), ans:newAnswers[choose1], held:false, guessed: \"\"})\n    newAnswers.splice(choose1,1)\n    //choose 2 ans randomly\n    const choose2 = Math.floor(Math.random()*2)\n    finalAnsArr.push({id:nanoid(), ans:newAnswers[choose2], held:false, guessed: \"\"})\n    newAnswers.splice(choose2,1)\n    //choose 3 ans randomly\n    const choose3 = Math.floor(Math.random())\n    finalAnsArr.push({id:nanoid(), ans:newAnswers[choose3], held:false, guessed: \"\"})\n    newAnswers.splice(choose3,1)\n    finalAnsArr.push({id:nanoid() ,ans: newAnswers[0], held:false, guessed: \"\"})\n   \n    return finalAnsArr\n}\n\nfunction checkAnswers () {\n    const arrayCorrectAns = answers.map ((el) => {\n          return el.correct\n    }) \n    let answersGuessed = 0;\n    arrayCorrectAns.map ((el,i) => {\n          if (el == userAns[i]) {\n            answersGuessed = answersGuessed +1;\n            setAnsShownScreen(prevAns => [\n              ...prevAns, prevAns[i].map((elem,a)=> {\n                console.log(elem.ans)\n                console.log(el)\n               return elem.ans === el? {...elem, guessed: \"yes\"}: elem\n\n                  })\n              \n            ])\n            console.log(answersGuessed)\n            console.log(ansShownScreen)\n          }\n    })\n    setGameWon(gameWon=> !gameWon)\n    setAnsCorrect(prevValue => answersGuessed)\n}\n\nfunction toggle (event) {\n    const answer = event.target.innerHTML\n    const noOfQuestion = event.target.getAttribute('name')\n    const newAnsArr = []\n    let final\n    // updates held to color field\n      setAnsShownScreen(prevAns => {\n              prevAns.map(ans => {\n                  if (ans === ansShownScreen[noOfQuestion]){\n                      const innerArr=[]\n                      ans.map((el) => {\n                         return el.ans === answer ? innerArr.push({id: el.id, ans: el.ans, held: !el.held, guessed: el.guessed})\n                          : innerArr.push({...el, held: false})\n                      })\n                      newAnsArr.push(innerArr)\n              } else {\n                      newAnsArr.push(ans)\n                  }\n                  final = newAnsArr.slice(0,5)\n              })\n              return final\n          })\n          //usets user answars array\n      setUserAns(prevAns => {\n          const ansArray = []\n          prevAns.map((elem,i) => {\n            if (i == noOfQuestion) {\n              return ansArray.push(answer)\n            } else {\n              return ansArray.push(prevAns[i])\n            }\n          })\n          return ansArray\n      })\n      console.log(userAns)\n      console.log(answers)\n\n}\n\n\n\n// //check ans shown screen exists\n// function resolveAfter2Seconds() {\n//   return new Promise(resolve => {\n//     setTimeout(() => {\n//       console.log(ansShownScreen)\n//     }, 2000);\n//   });\n// }\n\n// async function asyncCall() {\n//   console.log('calling');\n//   const result = await resolveAfter2Seconds();\n//   console.log(result);\n//   // Expected output: \"resolved\"\n// }\n\n// asyncCall();\n\n\n// setAnsShownScreen(prevAns => {\n//   prevAns.map(ans => {\n//       if (ans === answers){\n//           const innerArr=[]\n//           ans.map((el) => {\n//              return el.ans === answer ? innerArr.push({id: el.id, ans: el.ans, held: !el.held})\n//               : innerArr.push(el)\n//           })\n//           newAnsArr.push(innerArr)\n//   } else {\n//           newAnsArr.push(ans)\n//       }\n//       console.log(newAnsArr)\n//       const final = newAnsArr.slice(0,5)\n//       console.log(final.length)\n//       console.log(final)\n//       return final\n//   })\n  \n// })\n// const questionScreen = React.useEffect(() => {\n  \n//     ansShownScreen.map((ans, i ) => (\n  \n//       ( <Question \n//            question={questions[i].question} \n//            key={questions[i].id} \n//            name={questions[i].id} \n//            answers={ansShownScreen[i]}\n//            fullAnswers={ansShownScreen}\n//            toggle = {toggle} />)\n   \n// ))   \n  \n// },[ansShownScreen])\n\n// to dziala prawie\nconst questionScreen = ansShownScreen.map((ans, i ) => (\n  \n       ( <Question \n            question={questions[i].question} \n            key={questions[i].id} \n            name={questions[i].id} \n            answers={ansShownScreen[i]}\n            fullAnswers={ansShownScreen}\n            toggle = {toggle} />)\n    \n))\n\n// draws element onto DOM\n  return (\n    <div>\n        {(start) && (\n          <div>\n            <div className='container'> \n                <div className='title'>Quizzleee</div>\n                <div className='info'>Check your overall knowledge?</div>\n                <button className='button' onClick={changeStart}>Start Quiz</button>\n              </div>\n          </div> \n                 )}\n        {(!start) && (ansShownScreen) && (\n          <div>\n            <div className='containerAnswers'> \n                {questionScreen}\n                \n                {/* <Question \n                    question={questions[0].question} \n                    key={questions[0].id} \n                    name={questions[0].id} \n                    answers={ansShownScreen[0]}\n                    fullAnswers={ansShownScreen}\n                    saveAns={saveAns()}\n                    setAns = {setAnsShownScreen}\n                    id={ansShownScreen[0].id}\n                    toggle = {toggle} />\n              \n                <Question \n                    question={questions[1].question} \n                    key={questions[1].id} \n                    name={questions[1].id} \n                    answers={ansShownScreen[1]}\n                    fullAnswers={ansShownScreen}\n                    toggle = {toggle} />\n                <Question \n                    question={questions[2].question} \n                    key={questions[2].id} \n                    name={questions[2].id} \n                    answers={ansShownScreen[2]}\n                    fullAnswers={ansShownScreen}\n                    toggle = {toggle} />\n                <Question \n                    question={questions[3].question} \n                    key={questions[3].id} \n                    name={questions[3].id} \n                    answers={ansShownScreen[3]}\n                    fullAnswers={ansShownScreen}\n                    toggle = {toggle} />\n                <Question \n                    question={questions[4].question} \n                    key={questions[4].id} \n                    name={questions[4].id} \n                    answers={ansShownScreen[4]}\n                    fullAnswers={ansShownScreen}\n                    toggle = {toggle} /> */}\n                {gameWon && (<div>You scored {ansCorrect}/5 correct answers </div>)}\n                <button className='button' onClick={checkAnswers}>{gameWon? \"Play again\" : \"Check\"}</button>\n              </div>\n          </div> \n                 )}\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}